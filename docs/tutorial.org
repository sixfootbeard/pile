#+OPTIONS: toc:nil
(This tutorial is in progress)

Pile is a programming language in the LISP family that runs on the JVM. It duplicates much of the syntax and concepts (but not code) of Clojure and thus will feel familiar to users of that language. 

#+Toc: headlines 2

* Getting Started

The following software is needed before getting started:

- Java 25
- Git
- Maven

After git cloning the project run the repl by executing the file named 'repl' in the root directory. This will build the project and then run the REPL main. Once in the REPL Pile code can be evaluated:

#+begin_src clojure :eval no
(prn "Hello, World!")
#+end_src

If everything worked this should print out the hello world string.

Some functions produce values which are captured by the REPL and can be referenced later:

#+begin_src clojure :eval no
pile.repl> (+ 1 2)
*0: 3
pile.repl> (+ *0 5)
*1: 8
#+end_src

The first expression produced the number 3 which was assigned to the symbol '*0'. This symbol can be referenced in later expressions.

Some REPL tips:
- The REPL function 'help' can be used on a function to show arguments, comments, and examples.

#+begin_src clojure :eval no
(help 'prn)
#+end_src

- Exiting the REPL is accomplished by pressing CTRL+C at an empty prompt.

* Namespaces

Namespaces are containers of values and functions. The repl displays the namespace before each prompt. To change the namespace call the _ns_ function with a new namespace:

#+begin_src clojure :eval no
pile.repl> (ns a.b.c)
a.b.c>
#+end_src

Within a namespace we can define a value we can use the 'def' intrinsic.

#+begin_src clojure :eval no
(def one 1)
*2: #'pile.repl/one
#+end_src

We can then *reference* that value by name in later expressions in that same namespace.

#+begin_src clojure :eval no
pile.repl> (+ one 2)
*3: 3
#+end_src

* Functions

Functions are created with the 'fn' intrinsic and take the form:

#+begin_src clojure :eval no
(fn [arg-0 arg-1 ... arg-N] body)
#+end_src

We can use 'fn' with 'def' to create a function and then assign a name to it:

#+begin_src clojure :eval no
pile.repl> (def plus (fn [left right] (+ left right)))
#+end_src

We've now created a named function in our current namespace that we can call:

#+begin_src clojure :eval no
pile.repl> (plus 40 4)
;; 44
#+end_src

** DONE Varargs

Functions can accept a variable number of trailing arguments by adding a '&' symbol before the last element:

#+begin_src clojure :eval no
(defn varfn [preamble & items] 
  (prn preamble)
  (prn items)) 
#+end_src

The trailing argument will be a Sequence of values wrapping all the trailing arguments:

#+begin_src clojure :eval no
(varfn 1 2 3 4)
;; 1
;; (2 3 4)
#+end_src

** DONE Multiple Arity

A single function may accept multi sizes (arities) of arguments.

#+begin_src clojure :eval no
;; (fn ([arglist] body) ([another-arglist] another-body) ...)
(def many (fn ([a] :one) ([a b] :two)))
(many 1)
;; :one
(many 1 2)
;; :two
#+end_src

Functions can mix vararg types as well, but will always prefer the non-vararg arity if available.

#+begin_src clojure :eval no
(defn many ([a] :single) ([a & b] :vararg))
(many 1)
;; :single
(many 1 2)
;; :vararg
(many 1 2 3)
;; :vararg
#+end_src

** TODO Closures
** DONE Anonymous Functions

Anonymous functions can be created with the (anon-fn ...) form or the syntactic sugar #(...). Within an anonymous function form arguments can be referenced via the percent syntax (%N):

#+begin_src clojure :eval no
(def add (anon-fn (+ %0 %1)))
(add 1 2)
;; 3
(def add #(+ %0 %1))
(add 1 2)
;; 3
#+end_src

Anonymous functions can be closures. 

* Control Flow

Pile contains an 'if' expression which tests a conditional and yield a result from one of the branches. It takes the form:

#+begin_src clojure :eval no
(if test-expr then-clause else-clause)
#+end_src

The test-expr is simply an expression that returns a value that is either truthy or falsy. Only nil and boolean false are considered falsy. All other values are considered truthy.

#+begin_src clojure :eval no
pile.repl> (if (< 3 4) "less than!" "greater than!")
;; "less than!"
#+end_src

The else branch is optional and will cause the expression to return nil if taken:

#+begin_src clojure :eval no
pile.repl> (if (> 3 4) "less than!")
;; nil
#+end_src

* Local Variables

The 'let' expression allows defining local variables within functions and at the namespace level. These local variables will be usable only within the body of the let expression. 

#+begin_src clojure :eval no
(let [bindings] body)
#+end_src

'bindings' is an even length vector of alternating variables and expressions to assign to those variables.

#+begin_src clojure :eval no
pile.repl> (def categorize (fn [a b] 
      (let [lower (min a b)
            higher (max a b)]
         (prn "the lower number is " lower ", while the higher number is " higher))))
*8: #'pile.repl/categorize
pile.repl> (categorize 55 44)
the lower number is 44, while the higher number is 55
#+end_src

In this example we've created two local variables 'lower' and 'higher' which are subsequently used in the resulting expression printing the lower and higher value.

* Loops

A loop contains a set of bindings and a body. Within the body a call to _recur_ can be made which will rebind all of the values in _bindings_ and jump back to the top of the loop.

#+begin_src clojure :eval no
;; Form
(loop [bindings] body)
#+end_src

#+begin_src clojure :eval no
(defn sum-values [n]
   (loop [index 0
          sum 0] 
      (if (< index n)
          (recur (+ index 1) (+ sum index))
          sum)))
#+end_src

The above code creates two locals 'index' and 'sum' both set to zero. It then executes the body of the loop which is an 'if' expression. This tests that the index against a maximum value and then calls recur which rebinds 'index' to the expression (+ index 1) and 'sum' to the expression (+ sum index). When the 'if' test fails it simply returns the accumulate sum value.

Some things to note:
- Looping is performed manually with recur, and if no recur exists on a particular branch the loop will exit.
- A loop can have multiple locals which are updated each iteration.
- The recur syntax updates each local with the provided expressions in the order the locals were defined.
* Do Forms

Occasionally it will be necessary to execute statements with side effects such as logging statements before performing other operations. To accomplish this use the do form:

#+begin_src clojure :eval no
(do expression_0 expression_1 ... expression_N)
#+end_src

The do form will execute any number of expressions but will discard all expression values except the last one.

#+begin_src clojure :eval no
(defn prn-plus [a b]
  (do 
    (prn "about to print the result of adding " a " and " b)
    (+ a b)))
#+end_src

The call to prn was executed but its result was discarded, and the result of the do expression was the addition operation.

* TODO Collections

Pile contains implementations of persistent collections along with literal syntax to construct each collection. Persistent collections are immutable and updates to the collection all return a new collection with the operation reflected in the new structure.

** List

A persistent linked list with a size. 

Create persistent list using the varargs list function or the syntactic sugar '

#+begin_src clojure :eval no
(def alist (list 1 2 3))
(= 1 (first alist))
(def blist '(1 2 3))
(= alist blist)
;; true
#+end_src

Lists can also be created by calling conj (short for conjoin) which yields a new list with the new item prepended to the front of the list:

#+begin_src clojure :eval no
pile.repl> (conj '(2 3 4) 1)
;; (1 2 3 4)
pile.repl> (conj nil 0)
;; (0)
#+end_src

Access to the list items is accomplished via first/next:

#+begin_src clojure :eval no
pile.repl> (def alist (list 1 2 3))
*0: #'pile.repl/alist
;; Returns the first element, or nil if the list is empty
pile.repl> (first alist)
*1: 1
;; Returns all but the first item as a sequence
pile.repl> (next alist)
*2: (2 3)
;; Returns the number of elements in the list
pile.repl> (count alist)
*3: 3
;; Returns the nth element in the list, or nil if the index is out of range.
pile.repl> (nth alist 2)
*4: 3
#+end_src

** Vector

Implemented with an tree of arrays. 

Create persistent vectors using the varargs vector function or as a literal with square brackets.

#+begin_src clojure :eval no
pile.repl> (def avec [1 2 3])
*0: #'pile.repl/avec
pile.repl> (def bvec (vector 1 2 3))
*1: #'pile.repl/bvec
pile.repl> (= avec bvec)
*2: true
#+end_src

Vectors can also be created by conjoining elements, however the elements will be added to the end of the collection:

#+begin_src clojure :eval no
pile.repl> (conj [1 2 3] 4)
*0: [1 2 3 4]
#+end_src

Vectors have the same access functions as lists: first/next/count/nth.

** Map

Implemented with a hash array mapped trie with bitfield compression. 

Create maps using the hash-map function or as a literal with curly brackets {}

#+begin_src clojure :eval no
(def amap {:a :b})
(def bmap (hash-map :a :b))
(= amap bmap)
;; true
#+end_src

New elements can be included in the map by either conj'ing a pair or calling assoc with a new key and value.

#+begin_src clojure :eval no
(conj {:a :b :c :d} [:a :z])
;; {:a :z :c :d}
(assoc {:a :b :c :d} :a :z)
;; {:a :z :c :d}
#+end_src

Elements can be accessed from the map using the (get) function.

#+begin_src clojure :eval no
(def amap {:a :b})
(get amap :a)
;; :b
(get amap :z)
;; nil
(get amap :z :if-missing)
;; :if-missing
(contains? amap :a)
;; true
(contains? amap :z)
;; false
#+end_src

** Set

Create sets using the hash-set function or as a literal with a hash and curly brackets #{}

#+begin_src clojure :eval no
(def aset #{1 4 :abcd "pop"})
(def bset (hash-set 1 4 :abcd "pop" ))
(= aset bset)
;; true
#+end_src

Testing set inclusion is accomplished with the same (contains?) function, which returns a boolean indicating if the item was in the set.

#+begin_src clojure :eval no
(def aset #{1 4 :abcd "pop"})
(contains? aset 4)
;; true
(contains? aset "ma")
;; false

#+end_src

** TODO SortedMap

** TODO SortedSet

** TODO Queue
* DONE Sequences

Sequences form the basis for many operations in the language. Sequences in Pile are persistent and lazy computed.

Sequences are created by calling the (seq _source_) function. Sequences can be created from collections, streams or a combination of operations.

Core Sequence functions: 
#+begin_src clojure :eval no
;; Creates a sequence
(seq source)

;; Returns the first element of the sequence, or nil if empty.
(first sequence) 

;; Returns a new sequence with the elements after the first element or nil if that sequence would be empty.
(next sequence) 

;; Returns the nth element in the sequence or nil if the index is greater than the number of elements left.
(nth sequence index) 
#+end_src

Similar to collections, conjoining an element to a sequence creates a new sequence with that element as its head.

#+begin_src clojure :eval no
(def s (seq [1 2 3]))
(conj s 0)
;; (0 1 2 3)
#+end_src

** DONE Destructuring

Pile supports both sequential and associative destructuring in multiple forms. Destructuring is simply a succint syntax to unpack a data structure and assign elements to local variables in a method.

*** Sequential Destructuring

Sequential Destructuring can be accomplished by providing a vector of symbols to be bound in place of a single symbol:

#+begin_src clojure :eval no
(def s (seq [1 2 3]))
;; The following methods are equivalent
(defn print-all [sequence]
   (let [first-item (nth sequence 0)
         second-item (nth sequence 1)
         third-item (nth sequence 2)]
     (prn "first item: " first-item)
     (prn "second item: " second-item)
     (prn "third item: " third-item)))
;; 
(defn print-all-dest [[first-item second-item third-item]]
     (prn "first item: " first-item)
     (prn "second item: " second-item)
     (prn "third item: " third-item))

#+end_src

Notice instead of a single method argument 'sequence' we now have a vector of 3 items. The compiler will create a sequence from the provided first method argument and then assign the first/second/third item drawn from that sequence to the respective variables.

This syntax can be used in multiple forms:
- method arguments
- let bindings
- loop bindings

*** Associative Destructuring

Associative Destructuring is like the sequential variant but instead can extract values out of an associative structure like a map.

#+begin_src clojure :eval no
(def mapping {:a 12 :foo "bar"})
;; The following methods are equivalent
(defn print-all [mapping]
   (let [a-item (get mapping :a)
         foo-item (get mapping :foo)]
     (prn "a item: " a-item)
     (prn "foo item: " foo-item)))
;; 
(defn print-all-dest [{a-item :a foo-item :foo]}]
     (prn "a item: " a-item)
     (prn "foo item: " foo-item))

#+end_src

The syntax is a map of symbols to keys in the map. The symbols will be bound to the value of the associated key in the map.

*** Advanced Destructuring

Both forms of this destructuring can be arbitrarly nested and can be mixed:

#+begin_src clojure :eval no
(defn print-details [[{[first-name last-name] :name age :age} car-type]]
   (prn "Firstname: " first-name)
   (prn "Lastname: " last-name)
   (prn "Age: " age)
   (prn "Car type: " car-type))

(print-details [{:name ["John" "Doe"] :age 50} :mustang])

#+end_src

We're sequentially destructuring the single method argument which is a vector into two parts. The first element we associatively destructure expecting keys :name and :age in the map. For the value of :name key we sequentially destructure it assigning the result to the variables first-name and last-name. The value of the :age key is assigned to 'age'. Back at the top level the second element of the vector is assigned to the car-type variable.

* TODO Streams

Pile supports stateful, lazy transformation streams. These operations take a source, a set of transformations and a terminal operation.

#+begin_src clojure :eval no
(stream (range 10) (filter #(> % 5)) (map #(* % 3)) (into []))
;; [18 21 24 27]
#+end_src

We've created a stream from the sequence produced by (range 10) filtered it and collected the results in vector. 

There are no special Pile types that define intermediate/terminal functions. Intermediate functions are simply functions which return a function which accepts a single parameter of a java.util.stream.Stream and returns a java.util.stream.Stream. Terminal functions also create a function which take in a Stream but produce a single value. They can be thought of as any function which matches the following type:

#+begin_src java :eval no
public Function<Stream, Stream> intermediateFunction(...)
public Function<Stream, Object> terminalFunction(...)
#+end_src

Since the implementation uses actual streams they interoperate with Java produced streams easily.

Intermediate Operators: map, filter, reduce, mapcat, take, take-while, drop, drop-while, interpose, enumerate

Terminal Operators: any?, all?, into, foreach, sorted, joining

* TODO Math
* DONE Error Handling

** DONE try/catch

Exceptions are handled by a try/catch form:

#+begin_src clojure :eval no
(try
  (expression-to-run)
  (catch ExceptionType e (handler-expression))
  (finally (finally-expression)))
#+end_src

The result of executing this block could be:
- The result of the expression-to-run
- The result of the handler expression of one of the catch blocks (if the expression-to-run threw an exception)
- A propagated exception if the thrown exception was uncaught or one was rethrown in a catch block.

#+begin_src clojure :eval no
(def div (fn [a b]
  (try
    (/ a b)
    (catch java.lang.ArithmeticException e :divide-error)
    (finally (prn "finally block")))))
#+end_src

#+begin_src clojure :eval no
pile.repl> (div 10 2)
finally block
*4: 5
pile.repl> (div 1 0)
finally block
*5: :divide-error
#+end_src

There can be any number of catch expressions. The finally expression is executed but its result is discarded (ie. it is typically just used for a side-effect such as logging or resource cleanup).

** Conditions (beta)

There is preliminary support for a condition system.

#+begin_src clojure :eval no
;; Similar example in the common lisp wiki
(defn recip [v]
  (restart-case 
    (if (= v 0)
    	(error :on-zero)
    	(/ 1.0 v))
    (:return-zero [] 0)
    (:return-value [r] r)
    (:recalc-using [r] (recip r))))

(handler-bind [:on-zero ([] (invoke-restart :return-zero))]
	(recip 5)) 
;; .2   
	
(handler-bind [:on-zero ([] (invoke-restart :return-zero))]
	(recip 0))
;; 0
		
(handler-bind [:on-zero ([] (invoke-restart :return-value 44))]
	(recip 0)) 
;; 44

#+end_src

Condition functions:

#+begin_src clojure :eval no
;; This function wraps a body expression which it runs. The case statements labels are keywords, which can be individually referenced from an invoke-restart function, along with an argument list and body.
(restart-case body & case-statements)


;; This function triggers a lookup for bound handler functions (via handler-bind) of the same keyword type. This can also pass arguments to the bound handler function.
(error error-type & error-args)

;; Binds named handler functions which can be targeted from an error function. Handler names are keywords and can shadow earlier bound handlers.
(handler-bind bindings & body)

;; This function transfers control to a non-local named restart case and is typically called from within a bound handler function.
(invoke-restart restart-case-name & args)
#+end_src

* Pattern Matching

** case

Pattern matching on constants can be made with the case expression. This is similar to a switch statement in Java.

#+begin_src clojure :eval no
(defn c [a] 
    (case a 
          :one "one" 
          2 "two" 
          :other))
#+end_src

Case expressions take:
- an expression to test
- pairs of constant/expressions to match against and run
- (optionally) a single final expression if none match.

#+begin_src clojure :eval no
pile.repl> (c 5)
*9: :other
pile.repl> (c 2)
*10: "two"
pile.repl> (c :one)
*11: "one"
#+end_src

If no single final expression is present and the case statement doesn't match then the statement will throw an IllegalArgumentException.

** cond

For a more general matching method cond can be used which uses predicates to match instead of constants. 

#+begin_src clojure :eval no
(defn c [a] (cond (= a 12) "Is 12" 
                  (string? a) "A String instead" 
                  :else "None of these things"))
#+end_src

Each predicate is evaluated in order and the first truthy result will cause the case to return the associated expression.

#+begin_src clojure :eval no
*12: #'pile.repl/c
pile.repl> (c "some string")
*13: "A String instead"
pile.repl> (c 55)
*14: "None of these things"
pile.repl> (c 12)
*15: "Is 12"
#+end_src

By convention, an :else is used as a default/catch-all last expression since the keyword is always truthy (as is any expression that is not nil or false).

* TODO Polymorphism

** TODO Generic Methods

Pile supports type-based multiple dispatch via generic functions.

Generic functions are defined with 'defgeneric', and typed implementations with 'defimpl'. 

#+begin_src clojure :eval no
(defgeneric write-to [sink src])
(defimpl write-to [^PrintWriter sink ^String src] (.write sink src) (.flush sink))
(def pw (PrintWriter. System/-out))
(write-to pw "output")
;; "output"
#+end_src

Single dispatch variants can be inline specialized at a type definition (deftype) by adding :specialize within the definition followed by any number of specialized method implementations:

#+begin_src clojure :eval no
(defgeneric tostr [t])
(deftype Stringable [s] 
	:specialize 
	(tostr [this] s))
(def s (Stringable. "1234"))
(tostr s)
;; "1234"
#+end_src

** DONE Multimethods

Pile supports arbitrary multiple dispatch via multimethods. Use defmulti/defmethod to create/update multimethods.

#+begin_src clojure :eval no
(defmulti getl (fn* [x] (get x :type)))
(defmethod getl :a [x] "a")
(defmethod getl :b [x] "b")
(defmethod getl :default [x] "default")

(= "a" (getl {:type :a}))
(= "b" (getl {:type :b}))
(= :default (getl {:type "idk"}))
#+end_src

Multimethods can use custom hierarchies if the keying function produces keywords. 

*** TODO Hierarchies

* TODO Macros
* TODO Java Interop

** TODO Dot Operator

Pile also supports the dot operator '.' with the same syntax as Clojure.

** DONE First-class Java Functions 

Integer::valueOf is syntactic sugar that creates a first-class that calls the named function of the provided type. This means java methods can exist as first class functions:

#+begin_src clojure :eval no
(Integer::valueOf "12") // 12
(map Number::longValue [1 2.2]) // (1L 2L)
#+end_src

The generated function can call any arity/type of the named method although typically it is going to be a single method target. This syntax can call either static or instance methods, however all named variants must be all static or all instance methods (eg. Integer::toString would fail because there are both instance and static methods of Integer named 'toString'). Under the hood that syntax is converted to a call to (java-method Integer "valueOf"). Constructors can be called using this syntax by using the method named 'new' similar to how Java method references work.

This function can be used in all the ways a function can:

#+begin_src clojure :eval no
;; record Person(String fname, String lname, int age) {}
(def info ["John" "H" 36])
(apply Person::new info) ;; Person(John, H, 36)

(def johns-only (partial Person::new "John"))
(johns-only "Smith" 44) ;; Person(John, Smith, 44)
#+end_src

** DONE Type Creation

Pile has several methods of creating types that extend base classes and/or implement interfaces.

*** DONE deftype

The deftype form defines a named class implementing statically known supertype & interfaces with no closed over values. This form has several parts:
- Type Name
- Type Constructor arguments
- Implemented supertype (0 or 1) and/or interfaces (0 to many)
  If the supertype is specified it *must* be followed by a vector of constructor arguments.
- Method definitions

#+begin_src clojure :eval no
;; Template
(deftype TypeName [type constructor arguments]
         Supertype [supertype constructor arguments]
         Interface0
         (ifacefn [this] ...)
         Interface1
         (otherfn [this a b] ...))

#+end_src


An empty iterator:
#+begin_src clojure :eval no
(deftype EmptyIter [] 
         java.util.Iterator 
         (hasNext [this] false) 
         (next [this] (throw (java.util.NoSuchElementException.))))
#+end_src

A point in time which takes in an instant to return each invocation of instant:
#+begin_src clojure :eval no
(deftype PointInTime [inst] 
         java.time.InstantSource (instant [this] inst))
(def p (PointInTime. (java.time.Instant/now)))
(.instant p)

#+end_src

Varargs methods are supported for implementation:
#+begin_src clojure :eval no
;; public interface VariadicInterface { public String call(int num, String... strs); }
(deftype VarIntf []
    VariadicInterface
    (call [this num & strs] (apply str num strs)))
(. vi call 123 "a" "b" "c") ;; "123abc"
#+end_src

The vararg parameter ('strs' in the example above) may be treated like a sequence.

_Notes_

The order of the super-type/interface-types with the method definitions is not semantically relevant and can be in any order (with the exception that the supertype constructor arguments must follow the supertype itself) eg.
#+begin_src clojure :eval no
(deftype T []
         Interface0
         Interface1
         (interface0-method [this] ...)
         Supertype [a b c]
         (interface1-method [this] ...))
#+end_src

While this is allowed it is preferred if the types precede their associated method definitions.

*** DONE anon-cls

The anon-cls form creates an anonymous instance implementing statically known supertype & interfaces and allows closed over values.
#+begin_src clojure :eval no
(defn source []
      (let [inst (Instant/now)]
          (anon-cls java.time.InstantSource (instant [this] inst))))
#+end_src

*** DONE proxy

The proxy method creates an anonymous instance with dynamic interfaces and dynamically created method implementations. This method takes in a vector of interfaces to implement and a map from method name to either a function or a list of functions.

#+begin_src clojure :eval no
(def p (proxy [java.time.InstantSource] {"instant" (fn [this] (java.time.Instant/now))}))
(.instant p) ;; #object[java.time.Instant@524241174 "<time repr>"]
;; default methods
(.millis p) ;; 1634455725692
#+end_src

* DONE Concurrency
** DONE Synchronization

Java synchronization is accomplished via the locking form which synchronizes on an object and then evaluates an expression while holding the object's monitor.

#+begin_src clojure :eval no
;; (locking object expression)
(def base (java.util.HashMap.))
(locking base (.put base "foo" "bar"))
#+end_src

** DONE Atoms

An atom is a thread-safe reference to a value which can be overriden with (reset! ...) or updated with (swap! ...)

#+begin_src clojure :eval no
(def val (atom 0))
(reset! val 22)
(prn val) 
;; 22
(swap! val + 5)
(prn val)
;; 27
#+end_src

** DONE Structured Concurrency

Prefer structured concurrency when the lifetime of the subtasks are well defined. 

#+begin_src clojure :eval no
;; This macro creates a new task scope and evaluates the body.
;; (task-scope scope & body)

;; Fork a new task calling the provided function
;; (fork scope f)

;; Join the provided scope, waiting for all tasks to complete.
;; (join scope)

(defn compute-slow [a b]
  (sleep 1000)
  (+ a b))

(task-scope scope
  (let [first (fork scope #(compute-slow 1 2))
        second (fork scope #(compute-slow 2 3))]
     (join scope)
     (+ @first @second)))

;; 8
#+end_src

_Scoped Vars_
All subtasks automatically inherit values set in the (binding) form for ^:scoped vars.

#+begin_src clojure :eval no
(def ^:scoped username)

(defn run [name]
   (binding [username name]
     (plet [greeting (str "Hello " username "!")
            farewell (str "Goodbye " username "!")]
       (prn greeting)
       (prn farewell))))

#+end_src

In the above plet (parallel-let) the expressions were all computed in separate threads but were able to see the bound value for 'username'. 

** DONE Unstructured Concurrency

Unstructured Concurrency can be used when the lifetime of a thread of execution is indefinite.

*** Async/Await

An expression can be evaluated asynchronously by using the (async) macro. The result is a running task which can be awaited (await ...) or cancelled (cancel ...).

#+begin_src clojure :eval no
(def task (async (+ 1 2)))
(await task) 
;; 3
#+end_src

The await function can take multiple running tasks and returns the first task which completes.

#+begin_src clojure :eval no
(await (async (sleep 1000) 1) (async 2))
;; 2
#+end_src

To await for the first completion among a set of subtasks, cancelling the rest use (await-any)

#+begin_src clojure :eval no
(await-any (async (sleep 1000) (prn "waking up") 12) (async 44))
;; 44
;; Waking up does not print as that task was cancelled.
#+end_src

*** Channels

A channel is a thread-safe container of values which different running tasks can interact with to share data.
   
Channels can be created with (channel max-size). Values can be enqueued with (cput chan val) and values can be retrieved with (deref channel)

#+begin_src clojure :eval no
(def chan (channel 16))
(async (loop [] (prn "Got a value: " (deref chan)) (recur)))
(cput chan "first value")
;; "Got a value: first value"
(cput chan "second value")
;; "Got a value: second value"

#+end_src

An await expression can atomically interact with channels as well, enqueueing or dequeueing items.

* Misc Topics

** DONE Var Modifiers

Values and functions defined in a namespace can have attribute that modify their behavior.

#+begin_src clojure :eval no
;; The var stable cannot be redefined by any means.
(def ^:final stable 12)
#+end_src

#+begin_src clojure :eval no
;; The var 'local' is a thread-local var.
(def ^:dynamic local 12)
#+end_src

#+begin_src clojure :eval no
;; The var 'scope' is a thread-local var which will automatically inherit its parent's value within the context of a structured concurrent task scope. See Structured Concurrency.
(def ^:scoped scope 12)
#+end_src

** TODO Function apply

An inverse to varargs is the apply function. 

#+begin_src clojure :eval no
(apply function arg0 arg1 ... argLast)
#+end_src

It unpacks the last argument in the form and calls the function. 

All the following forms are similar and return 3:

#+begin_src clojure :eval no
(apply + [1 2])
(apply + 1 [2])
(apply + 1 2 [])
(apply + 1 2 nil)
#+end_src

** Java Modules

Pile is specified in the module 'pile.lang'. Other projects which wish to use interop must export and/or open their module to this module.

* TODO Syntax

This section can be read just as reference if some piece of syntax in the other sections isn't clear.

** TODO Datatypes

*** S-expression

*** Symbol

*** Number

*** Char

*** Boolean

*** Keyword

A keyword starts with a ':' followed by an (optional) namespace and name. If a namespace exists it will be separated by a '/'. The following are examples of keywords:

- :a
- :foobar
- :scope/field

The last example contains both a namespace 'scope' with a name 'field'. 

Keywords also serve as functions looking up their own mapped value in associative types:

#+begin_src clojure :eval no
pile.repl> (:a {:a :b, :c :d})
;; :b
#+end_src

*** Null

*** String

*** Vector

*** Map

*** Set

** TODO Syntactic Sugar
** TODO Literals

The language contains several literals:

*** TODO Number

Numbers begin with a numeric character 0-9 or a '-'. Non-decimal types are always parsed as integers, and decimal types are always parsed as doubles.

Numbers may end with a suffix character which will govern the resulting type of the literal:

| Suffix | Type       |
|--------+------------|
| N      | BigInteger |
| b      | BigDecimal |
| L      | Long       |
| f      | Float      |
| d      | Double     |

*** List

*** Vector

A vector is a persistent list of values. Vectors also have literal syntax using square brackets

#+begin_src clojure :eval no
[1 2 3]
#+end_src

Above is a vector of 3 numbers. 

Vector literals of [[*Symbol][symbols]] are often used as argument lists to functions and binding lists for 'let'.

*** Map

*** String

Strings are enclosed in double quotes or triple double quotes:

#+begin_src clojure :eval no
"A string"
#+end_src

#+begin_src clojure :eval no
"""
A longer string
"""
#+end_src

Triple quoted strings start with three double quotes followed by a newline. Additionally, any leading whitespace in the body of the string on any line is stripped.

Strings support the following escape sequences starting with a backslash '\'"

| \t | Tab             |
| \n | New line        |
| \r | Carriage return |
| \b | Backspace       |
| \" | Double Quote    |
| \' | Single Quote    |

Strings also support unicode escape sequences of the form '\uNNNN' where NNNN is a hex representation of a unicode code point. 
** TODO Expressions

An expression is a piece of syntax that logically returns a value.

#+begin_src clojure :eval no
;; Returns a boolean value true
(< 1 2)
#+end_src

#+begin_src clojure :eval no
;; Returns a number 3
(+ 1 2)
#+end_src

#+begin_src clojure :eval no
;; Returns a string
(str "Life is better " "together")
#+end_src

