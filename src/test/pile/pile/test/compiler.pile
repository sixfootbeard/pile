;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.compiler
    (:refer pile.test pile.test.util))
           
(import java.util.concurrent.atomic.AtomicInteger)       

;; property:
;; final/non-final
;; value/dynamic vs callable?
;; constable/non-constable

;; usage:
;; compiled/evaluated
;; called/used-as-value
;; redefined (non-final)
;; reset! (dynamic)

(def arrlist (new java.util.ArrayList))
(def arrlist-two (new java.util.ArrayList))

;; final/value
(def ^:final final-value-constable 44)
(def ^:final final-value-non-constable arrlist)
(def ^:final final-value-callable (fn [] "fvcall"))

(test "def - final/value"
  (each-form (is (= 44 final-value-constable)))
  (each-form (is (same? arrlist final-value-non-constable)))
  (each-form (is (= "fvcall" (final-value-callable)))))

;; final/dynamic
(def ^:final ^:dynamic final-dynamic-constable 54)
(def ^:final ^:dynamic final-dynamic-non-constable arrlist)
(def ^:final ^:dynamic final-dynamic-callable (fn [] "fdcall"))

(test "def - final/dynamic"
  (each-form (is (= 54 final-dynamic-constable)))
  (each-form (is (same? arrlist final-dynamic-non-constable)))
  (each-form (is (= "fdcall" (final-dynamic-callable))))
  ;; 
  (reset! #'final-dynamic-constable 95)
  (reset! #'final-dynamic-non-constable arrlist-two)
  (reset! #'final-dynamic-callable (fn [] "fdcall-two"))
  ;; 
  (each-form (is (= 95 final-dynamic-constable)))
  (each-form (is (same? arrlist-two final-dynamic-non-constable)))
  (each-form (is (= "fdcall-two" (final-dynamic-callable)))))

;; non-final/value
(def non-final-value-constable 64)
(def non-final-value-non-constable arrlist)
(def non-final-value-callable (fn [] "nfvcall"))

(test "def - non-final/value"
  (each-form (is (= 64 non-final-value-constable)))
  (each-form (is (same? arrlist non-final-value-non-constable)))
  (each-form (is (= "nfvcall" (non-final-value-callable)))))

;; non-final/dynamic
(def ^:dynamic non-final-dynamic-constable 74)
(def ^:dynamic non-final-dynamic-non-constable arrlist)
(def ^:dynamic non-final-dynamic-callable (fn [] "nfdcall"))

(test "def - non-final/dynamic"
   (each-form (is (= 74 non-final-dynamic-constable)))
   (each-form (is (same? arrlist non-final-dynamic-non-constable)))
   (each-form (is (= "nfdcall" (non-final-dynamic-callable))))
   ;; 
   (reset! #'non-final-dynamic-constable 195)
   (reset! #'non-final-dynamic-non-constable arrlist-two)
   (reset! #'non-final-dynamic-callable (fn [] "nfdcall-two"))
   ;;
   (each-form (is (= 195 non-final-dynamic-constable)))
   (each-form (is (same? arrlist-two non-final-dynamic-non-constable)))
   (each-form (is (= "nfdcall-two" (non-final-dynamic-callable)))))

(test "def - java values"
   (def ^:final final-arr (new java.util.ArrayList))
   (def arr (new java.util.ArrayList))

   (. final-arr add "one")
   (. arr add "fone")

   (is (= 1 (. final-arr size)))
   (is (= 1 (. arr size)))

   (defn return-final-arr [] final-arr)
   (defn return-arr [] arr)

   (is (= 1 (. (return-final-arr) size)))
   (is (= 1 (. (return-arr) size)))
    
   (def arr "foo")

   (is (= "foo" arr))    
   (is (= "foo" (return-arr))))       

(test "annotated types"
  (defn rstr ^String [] "foo")
  (is (= "foo" (rstr)))
      
  (defn rstr-arg ^String [a] a)
  (is (= "foo" (rstr-arg "foo")))
  (expect-fail "Wrong returned value should throw CCE" java.lang.ClassCastException
      (rstr-arg 12)))
    
(test "collection literals - null"
  (let [f (fn [] [1 2 nil])]
    (is (= [1 2 nil] (f))))
  (let [f (fn [a] [1 2 nil a])]
    (is (= [1 2 nil 4] (f 4))))
  (def ^:final def-with-null [1 nil 2])
  (defn defn-with-null [] def-with-null)
  (is (= [1 nil 2] (defn-with-null)))

  (def ^:final def-map {:a nil})
  (defn defn-map [] def-map)
  (is (=  {:a nil} (defn-map))))

(test "do form"
  (def do-int (new AtomicInteger))
  (do 
    (. do-int incrementAndGet)
    (pass))
  (is (= 1 (. do-int get)))
  (defn do-fn [a] (do (pass) (. a incrementAndGet))) 
  (def do-comp-int (new AtomicInteger))
  (do-fn do-comp-int)    
  (is (= 1 (. do-comp-int get))))
     
(test "def - dynamic rebind to value"
  (def ^:dynamic dyn 4)
  (is (= 4 dyn))  
  (defn dyn-comp [] dyn)
  (is (= 4 (dyn-comp)))
  (def dyn 3)    
  (is (= 3 dyn))
  (is (= 3 (dyn-comp))))
    
(test "def - dynamic final rebind"
  (def ^:final ^:dynamic *ret-a* (fn* [] "a"))
  (defn fn-ret-a [] (*ret-a*))
  (is (= "a" (*ret-a*)))
  (is (= "a" (fn-ret-a)))
        
  (reset! #'*ret-a* (fn* [] "b"))
  (is (= "b" (*ret-a*)))     
  (is (= "b" (fn-ret-a))))
    
;; Loops
;; eval + compile
(is (= 5 (loop* [b 1]
             (if (= b 5)
                 b
                 (recur (inc b))))))

(defn doloop [a] 
      (loop* [b a]
             (if (= b 5)
                 b
                 (recur (inc b)))))
              
(is (= 5 (doloop 1)))


(is (= 50 (loop* [a 0]
             (if (= a 50)
                 a
                 (recur (+ a (loop* [b 1]
                                    (if (= b 5)
                                        b
                                        (recur (inc b))))))))))
                                        
(defn doloop-double [z] 
      (loop* [a z]
             (if (= a 50)
                 a
                 (recur (+ a (loop* [b 1]
                                    (if (= b 5)
                                        b
                                        (recur (inc b)))))))))

(is (= 50 (doloop-double 0)))

(defn doloop-simpler [z] 
      (loop* [a z]
             (if (= a 50)
                 a
                 (let* [na (loop* [b 1]
                                  (if (= b 5)
                                      b
                                      (recur (inc b))))] 
                   (recur (+ a na))))))

(is (= 50 (doloop-simpler 0)))


(test "reset!"
  (def reset-target 44)
  (is (= 44 (deref #'reset-target)))
  (reset! #'reset-target 55)
  (is (= 55 reset-target))

  (def ^:dynamic reset-dyn-target 66)
  (is (= 66 (deref #'reset-dyn-target)))
  (reset! #'reset-dyn-target 77)
  (is (= 77 reset-dyn-target))

  (def reset-atom (atom {}))
  (reset! reset-atom {:a :b})
  (is (= {:a :b} (deref reset-atom))))


;; set!
(ns pile.test.set)
(def set-tgt 55)
(ns pile.test.compiler)
(set! pile.test.set/set-tgt 66)
(test "set! - var target - different namespace"
  (is (= 66 pile.test.set/set-tgt)))

;; var
;; compile
(def sval 12)
(defn change [a] (set! sval a))
(change 44)
(test "set! - var target - compile"
  (is (= 44 sval)))

(test "set! - var target - dynamic"
  (def ^:dynamic dval 15)
  (let [f (fn [a] (set! dval a))
        getval (fn [] dval)]
    (is (= 15 (getval)))
    (f 51)
    (is (= 51 (getval)))
    (is (= 15 (pile.core.async/await (pile.core.async/async (getval)))))))

;; eval
(set! sval 55)
(anon-test (is (= 55 sval)))

(test "def - dynamic thread"
  (def ^:dynamic edval 15)
  (let [getval (fn [] edval)]
    (is (= 15 (getval)))
    (set! edval 51)
    (is (= 51 (getval)))
    (is (= 15 (pile.core.async/await (pile.core.async/async (getval)))))))

;; instance
(test "set! - instance field"
  (let [p (new pile.util.Point 10 12)
        c (fn [o a] (set! (. o -x) a))]
    (c p 44)
    ;; test
    (is (= 44 (.-x p)))
    (expect-fail "Null receiver should NPE"
                 java.lang.NullPointerException
                 (c nil 18))
    (set! (. p -x) 55)
    (is (= 55 (.-x p)))))

(test "swap! - var dynamic target"
  (def ^:dynamic swap-dyn-target 66)
  (swap! #'swap-dyn-target inc)
  (is (= 67 swap-dyn-target)))

(test "swap! - atom target"
  (def swap-atom-target (atom {:a :b}))
  (swap! swap-atom-target assoc :c :d)
  (is (= {:a :b :c :d} (deref swap-atom-target))))


;; linking var fns
(test "var - callable directly"
  (defn ^:final final-var-fn [] "final-result")
  (defn call-final-var-fn [] (#'final-var-fn))
  (is "final-result" (call-final-var-fn))

  (defn var-fn [] "result")
  (defn call-var-fn [] (#'var-fn))
  (is (= "result" (call-var-fn)))
  (reset! #'var-fn (fn [] "different"))
  (is (= "different" (call-var-fn))))

;; static
(test "set! - static field"
  (let [c (fn [a] (set! (. pile.util.StaticFieldClass -x) a))]
     (c 44)
     (is (= 44 (. pile.util.StaticFieldClass -x)))
     (set! (. pile.util.StaticFieldClass -x) 55)
     (is (= 55 (. pile.util.StaticFieldClass -x)))))


;; do + recur tail position
(test "recur - tail position - do form"
  (expect-fail "recur should fail in non-tail position"
               pile.core.exception.PileCompileException
               (each-form (loop [a 1]
                      (if (= a 2)
                          a
                        (do
                         (recur 2)
                         (str "foo")))))))

(test "recur - tail position - do form nested"
  (expect-fail "recur should fail in non-tail position"
               pile.core.exception.PileCompileException
               (each-form (loop [a 1]
                             (if (= a 2)
                                 a
                                 (do
                                   (do (recur 2))
                                   (str "foo")))))))



(test "Do form eval - non-tail loop"
      (let [f (fn [] (loop [a 1]
           (if (= a 2)
              a
              (do
                (loop [b 3] (if (= b 4) b (recur 4)))
                (str "foo")))))]
        (is (= "foo" (f)))))


(test "Loop exception"
      (expect-fail "Loop cond throws"
                   java.lang.RuntimeException
                   (let [f (fn [] (let [loc (loop* [a 1]
                                              (cond (= a 4) (recur 4)
                                                    :else (throw (new java.lang.RuntimeException "err"))))]
                                    loc))]
                      (f))))

;; try/catch
(test "try/catch"
  (let [only-final (fn [f] (try (f) (finally "fin")))]
     (is (= 12 (only-final (constantly 12))))
     (expect-fail "Exception should still propagate" RuntimeException
                  (only-final #(throw (RuntimeException. "idk"))))))

(test "try/catch - finally branch"
  (let [atom-one (atom)
        atom-two (atom)
        atom-three (atom)
        with-ex (fn [f a] (try (f) (catch RuntimeException e (str "rte")) (finally (reset! a "fin"))))]
   (is (= 12 (with-ex (constantly 12) atom-one)))
   (is (= "fin" (deref atom-one)))

   (is (= "rte" (with-ex #(throw (RuntimeException.)) atom-two)))
   (is (= "fin" (deref atom-two)))

   (expect-fail "Exception should still propagate" Exception
                (with-ex #(throw (Exception. "idk")) atom-three))
   (is (= "fin" (deref atom-three)))))

(test "try/catch - expression semantics"
  (let [always-throws #(throw (RuntimeException.))
        call-throws (fn [] [1 (try (always-throws) (catch Exception e 3))])]
   (is (= [1 3] [1 (try (always-throws) (catch Exception e 3))]))
   (is (= [1 3] (call-throws)))))
