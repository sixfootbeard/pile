;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.util
    (:refer pile.test))

(require '(pile.pprint))

;; See pile.core.NativeTestRunner

;; *notifier* is provided by the test framework
(def ^:dynamic *test-suffix* 0)

(defn gen-test-name []
  (let [name (str "test-" *test-suffix*)]
               (do (swap! #'*test-suffix* inc)
                   name)))



(defmacro test
    ([exp] (let [msg (str "test-" *test-suffix*)]
              `(do (test ~msg ~exp)
                   (swap! #'*test-suffix* inc))))
    ([msg exp]
            `(do  
                (*notifier* :test-start ~msg)
                (try 
                  (if ~exp 
                    (*notifier* :test-success ~msg)
                    (*notifier* :test-failure ~msg (str "Assertion Failed.")))
                (catch Throwable t (*notifier* :test-failure ~msg t))))))

(defmacro test=
    ([a b]
      (let [msg (gen-test-name)]
        `(test= ~msg ~a ~b)))
    ([msg a b]
     `(test ~msg (let [lhs ~a
                       rhs ~b]
                    (= lhs rhs)))))
           
(defmacro testFail 
    [msg ex-type form]
    `(do  
       (*notifier* :test-start ~msg)
       (try 
           (do ~form 
               (*notifier* :test-failure ~msg (str "Expected failure, found none.")))
           (catch ~ex-type t (*notifier* :test-success ~msg))
           (catch Throwable t (*notifier* :test-failure ~msg t)))))         

(defmacro is
    ([tcond]
      `(is ~tcond ~(str tcond)))
    ([tcond message]
      (let [test-name (gen-test-name)]
        `(do  
           (*notifier* :test-start ~test-name)
           (try 
             (if ~tcond 
               (*notifier* :test-success ~test-name)
               (*notifier* :test-failure ~test-name (str ~message " returned false.")))
             (catch Throwable t
               (let [wrapped (new java.lang.RuntimeException (str ~message " threw exception") t)]
                 (*notifier* :test-failure ~test-name wrapped))))))))

(defmacro both= [expect expr]
    `(do 
        (is (= ~expect ~expr))
        (let [f# (fn [] ~expr)]
            (is (= ~expect (f#))))))


#_(defmacro suite [desc top & forms]
    (let* [dofm `(do ~top ~@forms)
           existing (:suite (meta top)) 
           suite-desc (if (nil? existing) 
                           desc 
                           (conj existing desc))
           enriched (vary-meta dofm conj [:suite suite-desc])]
       enriched))