;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.util
    (:refer pile.test))

(require '(pile.pprint))

;; See pile.core.NativeTestRunner

;; *notifier* is provided by the test framework
(def ^:dynamic *test-suffix* 0)

(defn gen-test-name []
  (let [name (str "test-" *test-suffix*)]
               (do (swap! #'*test-suffix* inc)
                   name)))


(defmacro test [msg & exp]
    `(do  
        (*notifier* :test-start ~msg)
        (try 
          (do ~@exp 
              (*notifier* :test-success ~msg))
          (catch Throwable t (*notifier* :test-failure ~msg t)))))

(defmacro is 
     ([syntax msg]
       `(if (do ~syntax)
            nil
            (throw (RuntimeException. ~msg))))
     ([syntax]
        `(is ~syntax ~(str syntax " threw exception"))))


(defmacro expect-fail 
    [msg ex-type form]
    `(do  
       (try 
           (do ~form 
               (throw (RuntimeException. "Expected failure, found none.")))
           (catch ~ex-type t true)
           (catch Throwable t (throw (RuntimeException. ~msg t)))))) 

(defmacro each-form [& syntax]
   `(do 
        ~@syntax
        (let [f# (fn [] ~@syntax)] (f#))))

(defmacro both= [expect expr]
    `(do 
        (is (= ~expect ~expr))
        (let [f# (fn [] ~expr)]
            (is (= ~expect (f#))))))


#_(defmacro suite [desc top & forms]
    (let* [dofm `(do ~top ~@forms)
           existing (:suite (meta top)) 
           suite-desc (if (nil? existing) 
                           desc 
                           (conj existing desc))
           enriched (vary-meta dofm conj [:suite suite-desc])]
       enriched))