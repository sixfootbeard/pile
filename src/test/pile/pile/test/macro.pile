;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.macro
    (:refer pile.test pile.test.util))

(defmacro qt [] '(+ a b))

(test "Quote"
  (is (= (list (sym "+") (sym "a") (sym "b")) (macroexpand '(qt)))))
        
(defmacro mplus [a b] '(+ ~a ~b))
(defmacro mplus-sym [a b] `(+ ~a ~b))

(test "Unquote" 
  (is (= (list (sym "+") 2 3) (macroexpand '(mplus 2 3)))))
    
(test "Unquote - Syntax" 
  (is (= (list (sym "pile.core" "+") 2 3) (macroexpand `(mplus-sym 2 3)))))

(defmacro plus [a b] '(+ ~a ~b))    
(defmacro unsplice-add [a] '(plus ~@a))    
(def comp-double-add (fn* [a] (unsplice-add [a a])))
    
(test "Unquote splice - quote - nested"
  (is (= (list (sym "+") 2 3) (macroexpand '(unsplice-add [2 3])))))
(test "Unquote splice - quote - call"
  (is (= 6 (comp-double-add 3))))    
    
(defmacro syn-plus [a b] `(+ ~a ~b))
(defmacro syn-unsplice-add [a] `(syn-plus ~@a))
(def syn-double-add (fn* [a] (syn-unsplice-add [a a])))

(test "Unquote splice - Syntax quote - nested"
    (is (= (list (sym "pile.core" "+") 2 3) (macroexpand '(syn-unsplice-add [2 3])))))
(test "Unquote splice - Syntax quote - call"
    (is (= 6 (syn-double-add 3))))       

(test "Argument evaluation - lazy"
   (defmacro inner [a] a)
   (defmacro outer [a] (is (= '(inner 1) a)))
   (outer (inner 1)))
