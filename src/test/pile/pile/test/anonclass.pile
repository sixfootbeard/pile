;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.anonclass
    (:refer pile.test pile.test.util)
    (:import (pile.test.classes TestBaseNoConstructorNoMethods TestBaseOneConstructorNoMethods
                        TestBaseAbstractNoConstructorOneMethod TestBaseOneConstructorOneMethod
                        TestBaseOneVarargsConstructorOneMethod TestBaseOneVarargsConstructor
                        TestBaseTwoConstructorOneMethod AbstractParent AbstractChild)))

;; Factors
;; Constructor Args: 0, 1+_Plain, 1+_Varargs
;; Closure: True, False

;; Testing
;; Compile/Eval
;; Test is-a type
;; Methods: implemented as expected (check interop)

;; Simplest test, no methods, no constructor
(test "AnonClass - Instance Test"
   (let [call-base-simple (anon-cls TestBaseNoConstructorNoMethods [])]
      (is (instance? TestBaseNoConstructorNoMethods call-base-simple))))

;; CArgs: 0, Closure: True
(test "AnonClass - Closure"
    (each-form
        (let [a "ev"
              c (anon-cls TestBaseAbstractNoConstructorOneMethod [] (getString [this] a))]
          (is (= "ev" (.getString c))))))

;; CArgs: 0, Closure: False

(test "AnonClass - Normal"
  (each-form 
     (is (= "foobar" (.getString (anon-cls TestBaseAbstractNoConstructorOneMethod [] (getString [this] "foobar")))))))

;; Check constructor args get set
(test "AnonClass - Single Arg Constructor"
  (each-form 
     (= "anArg" (anon-cls TestBaseOneConstructorNoMethods ["anArg"]))))

;; Constructor + closure args
(test "AnonClass - Overriding Methods"
  (each-form
     (let [s "foo"
           c (anon-cls TestBaseOneConstructorOneMethod ["anArg"]
               (getAnotherArg [this] s))]
        (is (= "anArg" (.getArg c)))
        (is (= "foo" (.getAnotherArg c))))))

;; + ambiguous constructor type
(test "AnonClass - Constructor Any Type"
   (let [f (fn [c s] (anon-cls TestBaseOneConstructorOneMethod [c]
                       (getAnotherArg [this] s)))
         c (f "another" "foo")]
       (is (= "another" (.getArg c)))
       (is (= "foo" (.getAnotherArg c)))))

;; Constructor (varargs)
(test "AnonClass - Varargs"
   (let [f #(anon-cls TestBaseOneVarargsConstructor [12])] 
     (is (= 0 (-> (f) .getArr (alength)))))
   (let [f #(anon-cls TestBaseOneVarargsConstructor [12 "anArg"])] 
     (is (= "anArg" (-> (f) .getArr (aget 0)))))
   (let [f #(anon-cls TestBaseOneVarargsConstructor [12 "anArg" "anotherArg"])] 
     (is (= "anArg" (-> (f) .getArr (aget 0))))
     (is (= "anotherArg" (-> (f) .getArr (aget 1))))))

;; Constructor (varargs) + closure args
(test "AnonClass - Varargs + closure args"
   (let [no-vargarg-one-method (fn [a] (anon-cls TestBaseOneVarargsConstructorOneMethod [12] (getAbs [this] a)))]
     (is (= 0 (-> (no-vargarg-one-method "a") .getArr alength)))
     (is (= "a" (-> (no-vargarg-one-method "a") .getAbs)))))

(test "Anonclass - Varargs - one method"
   (let [one-vargarg-one-method (fn [a] (anon-cls TestBaseOneVarargsConstructorOneMethod [12 "arg"] (getAbs [this] a)))]
     (is (= "arg" (-> (one-vargarg-one-method "a") .getArr (aget 0))))   
     (is (= "a" (-> (one-vargarg-one-method "a") .getAbs)))))


(test "Anonclass - Varargs - one method more constructor args"
   (let [one-vargarg-one-method (fn [a] (anon-cls TestBaseOneVarargsConstructorOneMethod [12 "arg" "two"] (getAbs [this] a)))]
     (is (= "arg" (-> (one-vargarg-one-method "a") .getArr (aget 0))))   
     (is (= "two" (-> (one-vargarg-one-method "a") .getArr (aget 1))))   
     (is (= "a" (-> (one-vargarg-one-method "a") .getAbs)))))

;; Untyped
(test "AnonClass - Untyped Constructor"
    (let [untyped-vargarg-one-method (fn [f s t] (anon-cls TestBaseOneVarargsConstructorOneMethod [f s t] (getAbs [this] "abs")))
          ambi (untyped-vargarg-one-method 12 "44" "55")]
       (is (= 12 (.getStart ambi)))
       (is (= "44" (-> ambi .getArr (aget 0))))
       (is (= "55" (-> ambi .getArr (aget 1))))))

(test "AnonClass - Ambiguous constructor"
   (expect-fail "AnonClass target constructor must be statically unambiguous" UnlinkableMethodException
     (fn [arg]
       (anon-cls TestBaseTwoConstructorOneMethod [arg]
         (getArg [this] "arg")))))

(test "AnonClass - Multiple Constructors"
   (let [f (fn [^String arg] (anon-cls TestBaseTwoConstructorOneMethod [arg]))]
     (is (= "one" (-> "one" f .getArg)))
   (let [f (fn [^int arg] (anon-cls TestBaseTwoConstructorOneMethod [arg]))]
     (is (= "1" (-> 1 f .getArg))))))

;; abstract parent
(test "AnonClass - abstract parent type")
  (let [f (anon-cls AbstractChild [] (doThing [this] "abcd"))]
     (is (= "abcd" (.doThing f))))

;; defaults
(test "AnonClass - Overriding default impls"
  (let [a (atom)
      it (anon-cls java.util.Iterator (remove [this] (reset! a 55)))]
   (.remove it)
   (is (= 55 (deref a)))))
