;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.defmulti
    (:refer pile.test pile.test.util)
    (:import (java.lang CharSequence)))


(test "Subtypes"
  (defmulti long-value class)
  (defmethod long-value Number [n] (.longValue n))
  (each-form (is (= 15L (long-value 15)))))

(test "Vector Subtypes"
  (defmulti add-values #(vector (class %0) (class %1)))
  (defmethod add-values [CharSequence CharSequence]
             [l r] (+ (Integer/valueOf l) (Integer/valueOf r)))
  (each-form (is (= 4 (add-values "1" "3")))))
             

(test "Callsite"
  (defmulti exclaim class)
  (defmethod exclaim String [s] (str s "!"))
  (let [f (fn [] (loop [i 0]
                   (if (= i 100)
                       true
                       (do 
                         (is (= "one!" (exclaim "one")))
                         (recur (inc i))))))]
    (f))
  
)

(test "Callsite - relink"
  (defmulti anum class)
  (defmethod anum String [s] (Long/valueOf s))
  (defmethod anum Number [s] s)
  (let [f (fn [a] (dotimes [_ 100] (is (= 1L (anum a)))))]
    (f "1")
    (f 1)))

(test "Missing - no default"
  (defmulti missing-no-default class)
  (defmethod missing-no-default String [s] "not missing")

  (expect-fail "Expected missing key to throw exception - evaluated" IllegalArgumentException
               (missing-no-default :foo))
  (let [f #(missing-no-default :foo)] 
     (dotimes [_ 100] 
        (expect-fail "Expected missing key to throw exception - compiled" IllegalArgumentException
                     (f)))))

(test "Missing - default"
  (defmulti missing-default class)
  (defmethod missing-default String [s] "not missing")
  (defmethod missing-default :default [s] "missing")

  (is (= "missing" (missing-default :foo)))  
  (let [f #(missing-default :foo)] 
     (dotimes [_ 100] 
        (is (= "missing" (f))))))