;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.interop
    (:refer pile.test pile.test.util))

(import (pile.util PlainSuper PlainSub CallSuperSub))

;; Method type selection
(test "Method Type Selection"
  (let [tbase (new CallSuperSub)
        call-ss (fn [^CallSuperSub base arg] (. base callOne arg))]
    (is (= "super" (call-ss tbase (new PlainSuper))))
    (is (= "sub" (call-ss tbase (new PlainSub))) "Interop method call with Any-typed arg should dynamically choose method to call."))
  (let [tbase (new CallSuperSub)
        call-ss-typed (fn [^CallSuperSub base ^PlainSuper arg] (. base callOne arg))]
    (is (= "super" (call-ss-typed tbase (new PlainSuper))))
    (is (= "super" (call-ss-typed tbase (new PlainSub))) "Interop method call with explicit types should always choose that method")))

(import (pile.util VariadicConstructor VariadicMethod))

;; Constructors
;; factors: null, varargs, compile/eval, wrong-type, multiple-targets

(import (pile.util StringConstructor))
(import (pile.nativebase.method PileInvocationException))

(test "Constructor - Simple argument"
   (is (= "abcd" (.getS (new StringConstructor "abcd")))))

(test "Constructor - Null argument"
   (is (= nil (.getS (new StringConstructor nil)))))

(test "Constructor - Types"
   (expect-fail "Call to constructor should throw when the wrong types are presented"
                PileInvocationException
                (new StringConstructor 12)))


(test "Constructor - Variadics"
  (each-form
    (let [c (new VariadicConstructor 15 "foos" "bars")]
      (is (= ["foos" "bars"] (. c getBars))))
    (let [c (new VariadicConstructor 15 "foos")]
      (is (= ["foos"] (. c getBars))))
    (let [c (new VariadicConstructor 15)]
      (is (= [] (. c getBars))))))
    
(test "Method - Variadic"
  (let [var-class (new VariadicMethod)]
    (each-form 
      (is (= ["foo" "bar"] (. var-class capture 12 "foo" "bar"))))
    (let [f (fn [^VariadicMethod base] (. base capture 12 "baz" "bat"))]
      (each-form 
        (is (= ["baz" "bat"] (f var-class)))))))

(test "Proxy - call"
  (let [p (proxy [pile.core.Value] {"getValue" (fn [] "fooz")})]
    (is (= "fooz" (. p getValue)))))

;; adapt ~# 
(import java.util.ArrayList)
(test "Adapt Syntax - Symbol"
  (each-form
    (let [input (new ArrayList)]
      (.add input 1)
      (.replaceAll input ~#inc)
      (is (= 2 (.get input 0))))))

(test "Adapt Syntax - Sexpr"
  (each-form
    (let [input (new ArrayList)]
      (.add input 1)
      (.replaceAll input ~#(str "item " %0))      
      (is (= "item 1" (.get input 0))))))

(test "Adapt Syntax - propagated type"
  (let [input (new ArrayList)
        f (fn [^ArrayList l] (.replaceAll l ~#(str %0 "!")))]
    (.add input 1)
    (f input)
    (is (= "1!" (.get input 0)))))

(test "Adapt Syntax - sexpr closure"
  (let [input (new ArrayList)
        f (fn [^ArrayList l a] (.replaceAll l ~#(str %0 a)))]
    (.add input 1)
    (f input "one")
    (is (= "1one" (.get input 0)))))

(import (pile.util VarArgFunctional AcceptsVarArgFunctional))

;; adapt ~# - varargs
(test "Adapt Syntax - varargs"
  (each-form
    (let [base (new AcceptsVarArgFunctional)]
      (is (= "12abc" (.call base ~#str 12 "a" "b" "c")))
      (is (= "12abc" (.call base ~#(apply str %0 %1) 12 "a" "b" "c"))))))

;; Generics

(import (pile.util PublicGeneric))

(test "Generic supertype"
   (let [v (PublicGeneric.)]
        (.add v "12")))

