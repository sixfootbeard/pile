;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.stdlib
    (:refer pile.test pile.test.util))

(test "same?"
  (let* [a (new String "a")
         as (new String "a")]
    (is (same? a a))
    (is (not (same? a as)))
    (is (same? nil nil))))
           
(test "string?"
  (is (string? "str"))
  (is (not (string? 12)))
  (is (not (string? nil))))

(test "int?"
  (is (int? 1) "Wrong default numeric literal type") 
  (is (not (int? "str")))
  (is (not (int? nil))))

(test "long?"
  (is (not (long? "str")))
  (is (long? (to-long 12)))
  (is (not (long? nil))))

(test "conj - list"
  (is (list :a) (conj (list) :a))   
  (is (list :a :b) (conj (list :b) :a))     
  (is (list :a :b) (conj (list) :b :a))     
  (is (list :a) (conj nil :a)))

(test "conj - map"
  (is (= {:a :b}
         (conj {} [:a :b])))
  (is (= {:a :b :c :d}
         (conj {:a :b} [:c :d])))    
  (is (= {:a :b :c :d :e :f}
         (conj {:a :b :c :d} [:e :f]))))

(test "get - map base"
  (is (= :a (get {:b :a} :b)))
  (is (= nil (get {:b :a} :z)))
  (is (= :c (get {:b :a} :z :c))))
    
(test "get - vector base"
  (is (= :a (get [:b :a] 1)))    
  (is (= :c (get [:b :a] :z :c))) 
  (is (= nil (get [:b :a] :z))))

(test "get - base base"
  (is (= nil (get 1 :b)))
  (is (= :z (get 1 :b :z))))

;; keyword
(test "keyword"
  (is (= :c (keyword "c")))
  (is (= :a/c (keyword "a" "c"))))
       
(test "keyword - linking"
  (each-form (is (= :b (:a {:a :b}))))
  (each-form (is (= :b (:a {:a :b} :z))))
  (each-form (is (= :z (:a {:b :c} :z))))
  (each-form (is (= nil (:a "bad"))))
  (each-form (is (= :z (:a "bad" :z))))

  (let [f (fn [a] (:a a))]
     (each-form (is (= :b (f {:a :b}))))
     (each-form (is (= nil (f {:b :c}))))
     (each-form (is (= nil (f "foo")))))
  (let [f (fn [a] (:a a :z))]
     (each-form (is (= :b (f {:a :b}))))
     (each-form (is (= :z (f {:b :c}))))
     (each-form (is (= :z (f "foo")))))

  (let [f (fn [k a] (k a))]
     (each-form (is (= :b (f :a {:a :b}))))
     (each-form (is (= nil (f :a {:b :c}))))
     (each-form (is (= nil (f :a "foo")))))
  (let [f (fn [k a] (k a :z))]
     (each-form (is (= :b (f :a {:a :b}))))
     (each-form (is (= :z (f :a {:b :c}))))
     (each-form (is (= :z (f :a "foo"))))))

;; Apply
;; ========
;; Factors:
;; - Call Site: Eval/Compile
;; - Target impl: Native/Compiled
;; - Target signature: Plain/JavaVarargs (native-only) /PileVarargs
;; - Symbol type: Namespace-resolved/opaque
;; - Stack/Arg size difference: eg. whether the target method has the same, more or less args

(test "apply - native methods"
  ;; _, Native, JavaVargArgs, NRS, _
  (each-form (is (= [1 2 3] (apply vector 1 2 [3]))))
  (let [tfn vector]
     (is (= [1 2 3] (apply tfn 1 2 [3])) "apply - eval/native/java-varargs/opaque."))
  (let [f (fn [func a] (apply func 1 2 [a]))]
     (is (= [1 2 3] (f vector 3)) "apply - compile/native/java-varargs/opaque.")
     (is (= "123" (f str 3)) "apply - compile/native/plain/opaque."))
  ;; Eval, Native, Plain, NRS, _
  (is (= :a (apply keyword ["a"])))
  (is (= :a/b (apply keyword "a" ["b"])))
  (is (= :a/b (apply keyword ["a" "b"])))
  (is (= :a/b (apply keyword "a" "b" [])))
  ;; Eval, Native, Plain, Opaque, _
  (let [tfn keyword]
     (is (= :a (apply tfn ["a"]))))
  ;; Compile, Native, Plain, NRS, _
  (let [apply-keyword (fn [t] (apply keyword t))]
    (is (= :a (apply-keyword ["a"])))
    (is (= :a/b (apply-keyword ["a" "b"])))))



(test "apply - compiled methods"
  ;; Eval, Compiled, PileVarArgs, NRS, _
  (defn tconj [a & b] (conj b a))
  (is (= '(1 2 3) (apply tconj [1 2 3])))
  (is (= '(1 2 3) (apply tconj 1 [2 3])))
  (is (= '(1 2 3) (apply tconj 1 2 [3])))
  (is (= '(1 2 3) (apply tconj 1 2 3 [])))

  ;; Compiled, Compiled, PileVarArgs, NRS, _
  (defn call-conj-one [] (apply tconj [1 2 3]))       
  (defn call-conj-two [] (apply tconj 1 [2 3]))       
  (defn call-conj-three [] (apply tconj 1 2 [3]))
  (defn call-conj-four [] (apply tconj 1 2 3 []))

  (is (= '(1 2 3) (call-conj-one)))
  (is (= '(1 2 3) (call-conj-two)))
  (is (= '(1 2 3) (call-conj-three)))
  (is (= '(1 2 3) (call-conj-four)))
  
  ;; TODO More apply tests
)


;; while           
(import java.util.concurrent.atomic.AtomicInteger)
(test "while"
  (let [aint (new AtomicInteger)]
    (while (< (. aint incrementAndGet) 10))
    (is (= 10 (. aint get)))))
(test "while - body"
  (let [bint (new AtomicInteger)
        cint (new AtomicInteger (to-int 10))]
    (while (< (. bint incrementAndGet) 10) (. cint incrementAndGet))
    (is (= 19 (. cint get)))))

(test "subvec"
  (let [vrange [0 1 2 3 4 5]]
    (is (= [1 2] (subvec vrange 1 3)))
    (is (= [3] (subvec (subvec vrange 3 5) 0 1)))
    (is (= [] (subvec vrange 1 1)))
    (expect-fail "subvec bad index should fail"
                 IllegalArgumentException
                 (subvec vrange 3 1))))    
 
(defn prepend [c] #(str c %))

;; Comp
(test "comp"
  (is (= "ab" ((prepend "a") "b")))
  (let [part (comp (prepend "b") (prepend "a"))]
    (each-form (is (= "bax" (part "x"))))
    (let [part-c (comp (prepend "c") part)]
        (each-form (is (= "cbax" (part-c "x")))))))

(test "Destructuring - sequential"
  (let [fn-desc (fn [[[a] b] c] [a b c])
        loop-desc (fn [c] (loop [[a b] c] [a b]))]
       (is (= [1 2 3] (fn-desc [[1] 2] 3)))
       (is (= [1 2] (loop-desc [1 2])))
       (is (= [1 2 3] (let [[[a b] c] [[1 2] 3]]
                         [a b c])))))

(test "Destructuring - associative"
  (let [two-args (fn [{a :a b :b}] [a b])
        two-default (fn [{a :a b :b :or {a "amiss" b "bmiss"}}] [a b])
        two-keys (fn [{:keys [a b]}] [a b])
        as-fn (fn [{a :a b :b :as full}] full)]
         (is (= [1 2] (two-args {:a 1 :b 2})))
         (is (= [1 nil] (two-args {:a 1})))
         (is (= [nil 2] (two-args {:b 2})))
         (is (= [nil nil] (two-args {})))
       
         (is (= [1 2] (two-default {:a 1 :b 2})))
         (is (= [1 "bmiss"] (two-default {:a 1})))
         (is (= ["amiss" 2] (two-default {:b 2})))
         (is (= ["amiss" "bmiss"] (two-default {})))

         (is (= [1 2] (two-keys {:a 1 :b 2})))
         (is (= [1 nil] (two-keys {:a 1})))
         (is (= [nil 2] (two-keys {:b 2})))
         (is (= [nil nil] (two-keys {})))

         (is (= {:a 1 :b 2} (as-fn {:a 1 :b 2})))))

;; case
(test "case - compile"
  (let [case-fn (fn [a]
                  (case a
                        1 "one"
                        5L "five"
                        [1 2] "vec-one-two"
                        :default))]
     (is (= "one" (case-fn 1)))
     (is (= "vec-one-two" (case-fn [1 2])))
     (is (= "five" (case-fn 5L)))
     (is (= "five" (case-fn 5)))
     (is (= :default (case-fn :no-match)))))

(test "case - eval"
  (is (= :a (case :b :b :a)))
  (is (= :a (case :b :b :a :default)))
  (is (= :default (case :z :b :a :default))))

;; cond
(defn tcomp [a]
      (cond (< a 0) :lt
            (> a 0) :gt
            :else :eq))

(test "cond"
  (is (= :eq (tcomp 0)))
  (is (= :lt (tcomp -1)))
  (is (= :gt (tcomp 1))))

;; condp
(defn tcondp [a]
      (condp > a 1000 "Biggest" 100 "Bigger" 0 "Small"))

(test "condp"
  (is (= (tcondp 1) "Small"))
  (is (= (tcondp 101) "Bigger"))
  (is (= (tcondp 1001) "Biggest"))
  (expect-fail "condp exception" IllegalArgumentException (tcondp -1)))

;; Tracking changes in references in other namespaces
(ns pile.test.a)
(def tracked 1)
(ns pile.test.stdlib)
(refer pile.test.a)
(anon-test (is (= 1 tracked)))
(in-ns pile.test.a)
(def tracked 5)
(in-ns pile.test.stdlib)
(test "tracking changed references" (is (= 5 tracked)))

;; Ensure defs of already resolved syms don't conflict
(ns pile.test.b)
(def tracked 5)
(ns pile.test.stdlib)
(refer pile.test.b)
(anon-test (is (= 5 tracked)))
(defn trfn [] tracked)
(anon-test (is (= 5 (trfn))))
(def tracked 11)
(test "Symbol tracking - overwrite" (is (= 11 tracked)))
;; compiled function refers to pile.test.b/tracked, *not* pile.test.stdlib/tracked
(test "Symbol tracking - previous reference" (is (= 5 (trfn))))

(test "Should be able def methods matching refer'd methods"
      (defn get [] "get"))

(test "any?"
  (is (= true (any? #(> % 10) [0 11 4])))
  (is (= true (any? #(> % 10) [11 4 0])))
  (is (= true (any? #(> % 10) [0 4 11])))

  (is (= false (any? #(> % 10) [0 4])))
  (is (= false (any? #(> % 10) [4 0])))

  (is (= false (any? #(> % 10) []))))

(test "all?"
  (is (= true (all? #(> % 10) [11 12 13])))
  (is (= true (all? #(> % 10) [13])))

  (is (= false (all? #(> % 10) [5 13])))
  (is (= false (all? #(> % 10) [13 5])))

  (is (= true (all? #(> % 10) []))))

(test "enumerate"
  (is (= nil (seq (enumerate []))))
  (is (= (seq [[0 1]]) (seq (enumerate [1]))))
  (is (= (seq [[0 "a"] [1 "b"]]) (seq (enumerate ["a" "b"])))))

(test "str - opaque"
  (let [no-arg (fn [f] (f))
        one-arg (fn [f] (f "a"))
        two-arg (fn [f] (f "b" "c"))]
    (is (= "" (no-arg str)))
    (is (= "a" (one-arg str)))
    (is (= "bc" (two-arg str)))))

(test "java-method - static/dynamic"
  (expect-fail "java-method cannot support both static/dynamic"
               IllegalArgumentException
               (java-method java.lang.Integer "toString")))

(test "java-method - missing target"
  (expect-fail "java-method should fail for a missing method"
               IllegalArgumentException
               (java-method java.lang.Integer "fooBar")))

(test "java-method - execution"
  (let [f (java-method java.lang.Integer "valueOf")]
     (is (= 44 (f "44"))))
  (let [f (java-method java.lang.Integer "compareTo")]
     (is (= -1 (f 44 55)))))

(test "range"
  (is (= [0 1 2] (->> (range 3) (into []))))
  (is (= [2 1 0] (->> (range 3) (reverse) (into []))))
  (is (= [2 1] (->> (range 3) (drop 1) (reverse) (into []))))
  (is (= [] (->> (range 3) (drop 3) (reverse) (into []))))

  (is (= [0 1 2] (stream (range 3) (into []))))
  (is (= [2 1 0] (stream (->> (range 3) (reverse)) (into []))))
  (is (= [2 1] (stream (->> (range 3) (drop 1) (reverse)) (into []))))
  (is (= [] (stream (->> (range 3) (drop 3) (reverse)) (into [])))))

(test "Array methods"
  (let [int-arr (array int 5)
        cloned (aclone int-arr)]
    (is (= 1 (alength cloned)))
    (is (= 5 (aget cloned 0)))

    (aset cloned 0 10)
    (is (= 10 (aget cloned 0)))
    (is (= 5 (aget int-arr 0))))

    (is (= 5 (alength (make-array int 5))))
    (is (= 1 (alength (array int 1))))
    (is (= 55 (aget (array int 55) 0))))

(test "array - relinking type"
  (let [array-two (fn [type f s] (array type f s))]
     (let [str-arr (array-two String "a" "b")]
       (is (= 2 (alength str-arr)))
       (is (= "a" (aget str-arr 0)))
       (is (= "b" (aget str-arr 1))))
     (let [prim-arr (array-two int 1 2)]
       (is (= 2 (alength prim-arr)))
       (is (= 1 (aget prim-arr 0)))
       (is (= 2 (aget prim-arr 1))))))


;; (doto)
(test "doto"
  (let [hm (doto (new java.util.HashMap) (.put 1 2) (.put 3 4))]
     (is (= 2 (.size hm)))
     (is (= 2 (.get hm 1)))
     (is (= 4 (.get hm 3)))))

