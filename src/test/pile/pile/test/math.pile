;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.test.math
    (:refer pile.test pile.test.util))

(defmacro eq-exact [l r]
   `(anon-test 
      (is (and (= (class ~l) (class ~r))
               (= ~l ~r)))))

(defmacro teq [l r]
   `(do 
       (eq-exact ~l ~r)
       ((fn [] (eq-exact ~l ~r)))))

;; 5.1.2 tests
;; byte
(teq 2 (+ (to-byte 1) (to-byte 1)))
(teq 2 (+ (to-byte 1) (to-short 1)))
(teq 2 (+ (to-byte 1) 1))
(teq 2.0f (+ (to-byte 1) 1f))
(teq 2.0 (+ (to-byte 1) 1.0))
(teq 2N (+' (to-byte 1) 1N))
(teq 2.0b (+' (to-byte 1) 1b))
;; short
(teq 2 (+ (to-short 1) (to-byte 1)))
(teq 2 (+ (to-short 1) (to-short 1)))
(teq 2 (+ (to-short 1) 1))
(teq 2.0f (+ (to-short 1) 1f))
(teq 2.0 (+ (to-short 1) 1.0))
(teq 2N (+' (to-short 1) 1N))
(teq 2.0b (+' (to-short 1) 1b))
;; int
(teq 2 (+ 1 (to-byte 1)))
(teq 2 (+ 1 (to-short 1)))
(teq 2 (+ 1 1))
(teq 2.0f (+ 1 1f))
(teq 2.0 (+ 1 1.0))
(teq 2N (+' 1 1N))
(teq 2.0b (+' 1 1b))
;; float
(teq 2f (+ 1f (to-byte 1)))
(teq 2f (+ 1f (to-short 1)))
(teq 2f (+ 1f 1))
(teq 2.0f (+ 1f 1f))
(teq 2.0d (+ 1f 1.0))
(teq 2.0b (+' 1f 1N))
(teq 2.0b (+' 1f 1b))



;; promotes to int
(teq -1 (negate (to-byte 1)))
;; promotes to int
(teq -1 (negate (to-short 1)))
(teq -1 (negate 1))
(teq -1L (negate 1L))
(teq -1b (negate 1b))
(teq -1N (negate 1N))
(teq -2147483648 (negate -2147483648))
(teq -9223372036854775808L (negate -9223372036854775808L))

;; promotes to int
(teq -1 (negate' (to-byte 1)))
;; promotes to int
(teq -1 (negate' (to-short 1)))
(teq -1 (negate' 1))
(teq -1L (negate' 1L))
(teq -1b (negate' 1b))
(teq -1N (negate' 1N))
(teq 2147483648L (negate' -2147483648))
(teq 9223372036854775808N (negate' -9223372036854775808L))

;; to-bigint
(teq 1N (to-bigint (to-byte 1)))
(teq 1N (to-bigint (to-short 1)))
(teq 1N (to-bigint 1))
(teq 1N (to-bigint 1L))
(teq 1N (to-bigint 1.0))
(teq 1N (to-bigint 1.0f))
(teq 1N (to-bigint 1b))
(teq 1N (to-bigint 1N))

;; to-bigdec
(teq 1b (to-bigdec (to-byte 1)))
(teq 1b (to-bigdec (to-short 1)))
(teq 1b (to-bigdec 1))
(teq 1b (to-bigdec 1L))
(teq 1b (to-bigdec 1.0))
(teq 1b (to-bigdec 1.0f))
(teq 1b (to-bigdec 1N))
(teq 1b (to-bigdec 1b))

(test "less than"
  (is (< 1 2))
  (is (< 1 2f))
  (is (< 1 2d))
  (is (< 1 2.0f))
  (is (< 1 2.0d))
  (is (< 1 2L))
  (is (< 1 2N))
  (is (< 1 2b))

  (is (< 1 2))
  (is (< 1f 2))
  (is (< 1d 2))
  (is (< 1.0f 2))
  (is (< 1.0d 2))
  (is (< 1L 2))
  (is (< 1N 2))
  (is (< 1b 2))


  ;; false
  (is (not (< 2 1)))
  (is (not (< 2 1f)))
  (is (not (< 2 1d)))
  (is (not (< 2 1.0f)))
  (is (not (< 2 1.0d)))
  (is (not (< 2 1L)))
  (is (not (< 2 1N)))
  (is (not (< 2 1b)))

  (is (not (< 2 1)))
  (is (not (< 2f 1)))
  (is (not (< 2d 1)))
  (is (not (< 2.0f 1)))
  (is (not (< 2.0d 1)))
  (is (not (< 2L 1)))
  (is (not (< 2N 1)))
  (is (not (< 2b 1))))