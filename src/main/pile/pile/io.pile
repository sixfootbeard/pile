;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.core.io)

(import (java.lang Appendable)
        (java.nio ByteBuffer)
        (java.nio.charset Charset)
        (java.nio.channels Channel Channels Pipe ReadableByteChannel WritableByteChannel FileChannel)
        (java.io InputStream OutputStream File FileInputStream FileOutputStream)
        (java.nio.file Files Path Paths))

(defgeneric charset "Return a java.nio.charset.Charset" [cs])
(defimpl charset [^Charset cs] cs)
(defimpl charset [^String cs] (Charset/forName cs))

;; Path

(defgeneric path "Create a java.nio.file.Path" [source])
(defimpl path [^Path path] path)
(defimpl path [^String s] (Path/of s))
(defimpl path [^File f] (.toPath f))


(defn read-all [f cs]
      (-> f path (Files/readString (charset cs))))

(defn line-stream [f cs]
      (-> f path (Files/lines (charset cs))))

(defn lines [f cs]
      (seq (line-stream f cs)))

(defn exists? [f] (-> f path Files/exists))
(defn file? [f] (-> f path Files/isRegularFile))
(defn directory? [d] (-> d path Files/isDirectory))
(defn list-stream [d] (-> d path Files/list))
(defn move [s d] (Files/move (path s) (path d)))
(defn delete [f] (-> f path (Files/delete)))

(defn tmp-file 
   ([] (tmp-file nil nil))
   ([prefix suffix] (Files/createTempFile prefix suffix))
   ([p prefix suffix] (Files/createTempFile p prefix suffix)))

(defn tmp-dir
   ([] (tmp-dir nil nil))
   ([prefix suffix] (Files/createTempDirectory prefix suffix))
   ([p prefix suffix] (Files/createTempDirectory p prefix suffix)))

;; TODO Fix
#_(defn walk
   "Walks the given directory structure, calling the provided function on each file path"
   ([p f] (Files/walkFileTree p (FileOnlyWalk. f))))

(defn file-stream [d] (Files/walkFileTree d))

(defgeneric copy "Append all bytes from the source to dest" [source dest])
(defimpl copy [^Path source ^OutputStream dest] (Files/copy source dest))
(defimpl copy [^InputStream source ^Path dest] 
   (with [os (-> dest path .toFile (FileOutputStream. true))]
      (.transfer source os)))
(defimpl copy [source dest]
   (with [is (-> source path .toFile FileInputStream.)]
      (copy is (path dest))))

(defn writer [target cs]
   (Files/newBufferedWriter (path target) (charset cs)))

(defn write [^Appendable w ^String s]
   (.append w s))

(defn write-bytes [^OutputStream os ^bytes b]
   (.write os b))