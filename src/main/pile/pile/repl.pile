;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.repl)

(defmacro doc [sym] `(-> ~sym var meta :doc))

(defn help [sym]
   (if (not (symbol? sym))
     (prn "Help argument must be a symbol, eg. (help 'stream)")
     (let [v (try 
             (pile.compiler.form.VarForm/getIn *ns* sym)
             (catch java.lang.NullPointerException e nil))]
      (if (nil? v)
          (prn "No function found with name: " (str sym))
        (let [m (meta v)
                filename (:pile.core/filename m)
                line-number (:pile.core/line-number m)
                doc (:doc m)
                builder (new java.lang.StringBuilder)]
          (pile.core.string/append builder v)
          (if filename 
              (do (pile.core.string/append builder "  (defined: ")
                  (pile.core.string/append builder filename)
                  (when (:pile.core/native-source m)
                     (pile.core.string/append builder " <natively>"))
                  (when line-number 
                      (do (pile.core.string/append builder ":")
                          (pile.core.string/append builder line-number)))
                  (pile.core.string/append builder ")")))
          (pile.core.string/append builder "\n\n")                    
          (pile.core.string/append builder (if doc doc "<no documentation>"))                    
          (pile.core.string/append builder "\n")
          (prn builder))))))
