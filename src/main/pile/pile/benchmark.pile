;; Copyright 2023 John Hinchberger
;; 
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;; 
;;     http://www.apache.org/licenses/LICENSE-2.0
;; 
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

(ns pile.benchmark)

(import java.math.BigInteger)

(defmacro bench-raw [n & body]
    `(let [f# (fn [] (let [start (System/nanoTime)
                           _ (do ~@body)
                           end (System/nanoTime)]
                 (- end start)))
           call# (fn [n#] (loop [i 0
                                 times []]
                            (if (>= i n#)
                               times
                               (let [time# (f#)]
                                   (recur (inc i) (conj times time#))))))]
         ;; warmup
         (call# 20)
         (call# ~n)))

(defmacro bench-fn-raw [n input-fn bench-fn]
    `(let [f# (fn [i] (let [start (System/nanoTime)
                            _ (~bench-fn i)
                            end (System/nanoTime)]
                 (- end start)))
           call# (fn [n#] (loop [i 0
                                 times []]
                            (if (>= i n#)
                               times
                               (let [input-val (~input-fn i)
                                     time# (f# input-val)]
                                   (recur (inc i) (conj times time#))))))]
         ;; warmup
         (call# 20)
         (call# ~n)))


(defmacro bench-fn [n input-fn bench-fn]
    `(let [times# (bench-fn-raw ~n ~input-fn ~bench-fn)
           total# (stream times# (reduce +' 0))
           count# (count times#)]
        (prn "Average time " (/' total# count#) "ns")))

(defmacro bench [n & body]
    `(let [times# (bench-raw ~n ~@body)
           total# (stream times# (reduce +' 0))
           count# (count times#)]
        (prn "Average time " (/' total# count#) "ns")))


